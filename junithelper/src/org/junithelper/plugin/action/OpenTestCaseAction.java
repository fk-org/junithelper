package org.junithelper.plugin.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IEditorActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.junithelper.plugin.Activator;
import org.junithelper.plugin.STR;
import org.junithelper.plugin.util.FileResourceUtil;
import org.junithelper.plugin.util.ResourcePathUtil;
import org.junithelper.plugin.util.ResourceRefreshUtil;
import org.junithelper.plugin.util.TestCaseGenerateUtil;
import org.junithelper.plugin.util.ThreadUtil;

public class OpenTestCaseAction extends Action implements IActionDelegate,
		IEditorActionDelegate
{

	private ISelection selection = null;

	public void run(IAction action)
	{

		try
		{

			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();

			String projectName = null;
			String testTargetClassname = null;
			String testCaseFilename = null;
			String testCaseCreateFilepath = null;
			String testCaseResource = null;

			StructuredSelection structuredSelection = null;
			if (selection instanceof StructuredSelection)
			{
				// select in view(package explorer, navigator)
				structuredSelection = (StructuredSelection) selection;
			} else
			{
				// TODO what to do?
			}

			if (structuredSelection != null && structuredSelection.size() == 0)
			{
				// required selecttion
				MessageDialog.openWarning(new Shell(), STR.Dialog.Common.TITLE,
						STR.Dialog.Common.REQUIRED);
				return;
			} else if (structuredSelection != null && structuredSelection.size() > 1)
			{
				// select only one
				MessageDialog.openWarning(new Shell(), STR.Dialog.Common.TITLE,
						STR.Dialog.Common.SELECT_ONLY_ONE);
				return;
			}

			// path started from project root
			String pathFromProjectRoot = ResourcePathUtil
					.getPathStartsFromProjectRoot(structuredSelection);

			// path started from project root
			// ex. /{projectName}/src/main/java/hoge/foo/var/TestTarget.java
			String[] dirArrFromProjectRoot = pathFromProjectRoot.split(STR.DIR_SEP);
			// test case file create filesystem path
			String selected = STR.EMPTY;
			int allDirLen = dirArrFromProjectRoot.length - 1;
			for (int i = 2; i < allDirLen; i++)
				selected += dirArrFromProjectRoot[i] + STR.DIR_SEP;
			selected += dirArrFromProjectRoot[allDirLen]; // filename

			// current project name
			projectName = dirArrFromProjectRoot[1];

			// last element is test class file name
			String testTargetClassFilename = dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
			testTargetClassname = testTargetClassFilename
					.replace(STR.JAVA_EXP, STR.EMPTY);

			// test case name to open
			testCaseFilename = testTargetClassname + STR.SUFFIX_OF_TESTCASE
					+ STR.JAVA_EXP;

			// get workspace path on os file system
			String projectRootPath = workspaceRoot.getLocation() + STR.DIR_SEP
					+ projectName + STR.DIR_SEP;

			if (testTargetClassname == null)
			{
				// required to select java file
				MessageDialog.openWarning(new Shell(), STR.Dialog.Common.TITLE,
						STR.Dialog.TestCase.SELECT_JAVA_FILE);

			} else
			{
				testCaseResource = selected.replace(STR.SRC_MAIN_JAVA, STR.SRC_TEST_JAVA)
						.replace(STR.JAVA_EXP, STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
				testCaseCreateFilepath = projectRootPath
						+ selected.replace(STR.SRC_MAIN_JAVA, STR.SRC_TEST_JAVA).replace(
								STR.JAVA_EXP, STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);

				// check already exist file
				File outputFile = new File(testCaseCreateFilepath);
				if (!outputFile.exists())
				{
					// ----------------------------------------
					// create new file
					// ----------------------------------------
					String msg = STR.Dialog.Common.NOT_EXIST + " (" + testCaseFilename
							+ ")" + STR.LINE_FEED
							+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;

					if (testCaseFilename != null
							&& MessageDialog.openConfirm(new Shell(),
									STR.Dialog.Common.TITLE, msg))
					{
						// create new file(java,dicon)
						new CreateNewTestCaseAction().run(action, selection);
					}
					return;
				}

				// ----------------------------------------
				// open test case
				// ----------------------------------------
				int retryCount = 0;
				IEditorPart editorPart = null;
				while (true)
				{
					try
					{
						IProject project = workspaceRoot.getProject(projectName);
						IFile testCaseFile = project.getFile(testCaseResource);
						String editorId = IDE.getEditorDescriptor(testCaseFile.getName())
								.getId();
						IWorkbenchPage page = PlatformUI.getWorkbench()
								.getActiveWorkbenchWindow().getActivePage();
						editorPart = IDE.openEditor(page, testCaseFile, editorId);
						editorPart.setFocus();

						// unimplemeneted test methods
						if (Activator.getDefault().getPreferenceStore().getBoolean(
								STR.Preference.TestMethodAutoGenerate.ENABLE))
						{
							IFile testTargetFile = project.getFile(selected);
							List<String> unimpledTestMethodNames = TestCaseGenerateUtil
									.getUnimplementedTestMethodNames(testTargetFile,
											testCaseFile);
							// need to add test method
							if (unimpledTestMethodNames.size() > 0)
							{
								List<String> lines = TestCaseGenerateUtil
										.getAllSourceCodeLineList(testCaseFile);
								OutputStreamWriter testFileOSWriter = null;
								FileOutputStream fos = null;
								try
								{
									// generate test class
									fos = new FileOutputStream(projectRootPath
											+ STR.DIR_SEP + testCaseResource);
									testFileOSWriter = new OutputStreamWriter(fos);

									StringBuffer sb = new StringBuffer();
									String CRLF = STR.CARRIAGE_RETURN + STR.LINE_FEED;
									for (String line : lines)
									{
										if (line.equals("}"))
										{
											for (String testMethod : unimpledTestMethodNames)
											{
												sb.append("\tpublic void ");
												sb.append(testMethod);
												sb.append("() throws Exception {");
												sb.append(CRLF);
												sb.append("\t\t// TODO");
												sb.append(CRLF);
												sb.append("\t}");
												sb.append(CRLF);
												sb.append(CRLF);
											}
											sb.append("}");
											sb.append(CRLF);
											break;
										} else
										{
											sb.append(line);
											sb.append(CRLF);
										}
									}
									String content = sb.toString();
									testFileOSWriter.write(content);
								} finally
								{
									FileResourceUtil.close(testFileOSWriter);
									FileResourceUtil.close(fos);
								}
							}

							// resource refresh
							if (!ResourceRefreshUtil.refreshLocal(null, projectName
									+ STR.DIR_SEP + testCaseResource + "/.."))
							{
								MessageDialog.openWarning(new Shell(),
										STR.Dialog.Common.TITLE,
										STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
								System.err.println("Resource refresh error!");

							} else
							{

								// open test case
								retryCount = 0;
								ThreadUtil.sleep(1500);
								while (true)
								{
									try
									{
										editorPart = IDE.openEditor(page, testCaseFile,
												editorId);
										if (editorPart == null)
											throw new NullPointerException();
										break;
									} catch (Exception e)
									{
										retryCount++;
										if (retryCount > 3)
											break;
										ThreadUtil.sleep(1500);
									}
								}
								editorPart.setFocus();
							}
						}

					} catch (Exception e)
					{
						retryCount++;
						if (retryCount > 10)
							break;
						e.printStackTrace();
						ThreadUtil.sleep(1500);
					}
					break;
				}
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public void selectionChanged(IAction action, ISelection selection)
	{
		this.selection = selection;
	}

	public void setActiveEditor(IAction action, IEditorPart targetEditor)
	{
		// TODO Auto-generated method stub

	}

}
