/* 
 * Copyright 2009-2010 junithelper.org. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License. 
 */
package org.junithelper.plugin.action;

import java.io.File;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IEditorActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.junithelper.plugin.constant.Dialog;
import org.junithelper.plugin.constant.RegExp;
import org.junithelper.plugin.constant.StrConst;
import org.junithelper.plugin.page.PreferenceLoader;
import org.junithelper.plugin.util.ResourcePathUtil;
import org.junithelper.plugin.util.ThreadUtil;

/**
 * OpenTestTargetAction<br>
 * <br>
 * Open test target developing source.<br>
 * 
 * @author Kazuhiro Sera <seratch@gmail.com>
 * @version 1.0
 */
public class OpenTestTargetAction extends Action implements IActionDelegate,
		IEditorActionDelegate {

	private ISelection selection = null;

	public IPreferenceStore store = null;

	public void run(IAction action) {
		PreferenceLoader pref = new PreferenceLoader(store);
		try {
			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace()
					.getRoot();
			String projectName = null;
			StructuredSelection structuredSelection = null;
			if (selection instanceof StructuredSelection) {
				// viewer
				structuredSelection = (StructuredSelection) selection;
			}
			if (structuredSelection != null && structuredSelection.size() == 0) {
				// required selecttion
				MessageDialog.openWarning(new Shell(), Dialog.Common.title,
						Dialog.Common.required);
			} else if (structuredSelection != null
					&& structuredSelection.size() > 1) {
				// select only one
				MessageDialog.openWarning(new Shell(), Dialog.Common.title,
						Dialog.Common.selectOneOnly);
			} else {
				// path started from project root
				String pathFromProjectRoot = ResourcePathUtil
						.getPathStartsFromProjectRoot(structuredSelection);
				// path started from project root
				// ex. /{projectName}/src/main/java/hoge/foo/var/TestTarget.java
				String[] dirArrFromProjectRoot = pathFromProjectRoot
						.split(StrConst.dirSep);
				// test case file create filesystem path
				String selected = StrConst.empty;
				int allDirLen = dirArrFromProjectRoot.length - 1;
				for (int i = 2; i < allDirLen; i++)
					selected += dirArrFromProjectRoot[i] + StrConst.dirSep;
				selected += dirArrFromProjectRoot[allDirLen].replace(
						StrConst.suffixOfTestcase + StrConst.javaFileExp,
						StrConst.javaFileExp);
				// current project name
				projectName = dirArrFromProjectRoot[1];
				// get workspace path on os file system
				String projectRootPath = workspaceRoot.getLocation()
						+ StrConst.dirSep + projectName + StrConst.dirSep;
				// check selecting java file
				if (!selected.matches(".*" + RegExp.javaFileExp + "$")) {
					// required to select java file
					MessageDialog.openWarning(new Shell(), Dialog.Common.title,
							Dialog.Common.selectJavaFile);
				} else {
					String testTargetResource = selected.replace(
							pref.commonTestMainJavaDir,
							pref.commonSrcMainJavaDir);
					String testTargetPath = projectRootPath
							+ selected.replace(pref.commonTestMainJavaDir,
									pref.commonSrcMainJavaDir);
					// check already exist file
					File outputFile = new File(testTargetPath);
					if (outputFile.exists()) {
						// open test case
						int retryCount = 0;
						IEditorPart editorPart = null;
						while (true) {
							try {
								IProject project = workspaceRoot
										.getProject(projectName);
								IFile testCaseFile = project
										.getFile(testTargetResource);
								String editorId = IDE.getEditorDescriptor(
										testCaseFile.getName()).getId();
								IWorkbenchPage page = PlatformUI.getWorkbench()
										.getActiveWorkbenchWindow()
										.getActivePage();
								editorPart = IDE.openEditor(page, testCaseFile,
										editorId);
								editorPart.setFocus();
							} catch (Exception e) {
								e.printStackTrace();
								retryCount++;
								if (retryCount > 10)
									break;
								ThreadUtil.sleep(1500);
							}
							break;
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Method to catch the event selection has been changed.
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		this.selection = selection;
	}

	/**
	 * Required in IEditorActionDelegate(ex. Java editor)
	 */
	public void setActiveEditor(IAction action, IEditorPart targetEditor) {
	}

}
