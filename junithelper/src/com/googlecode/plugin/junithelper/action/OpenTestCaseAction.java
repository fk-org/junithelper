package com.googlecode.plugin.junithelper.action;

import org.eclipse.core.internal.resources.File;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.internal.core.CompilationUnit;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;

import com.googlecode.plugin.junithelper.IConstants;

public class OpenTestCaseAction extends Action implements IActionDelegate
{

	private ISelection selection = null;

	@SuppressWarnings("restriction")
	public void run(IAction action)
	{

		String projectName = null;
		String testTargetClassname = null;
		String testCaseFilename = null;
		String testCaseCreateFilepath = null;
		String testCaseResource = null;

		try
		{

			StructuredSelection structuredSelection = null;
			if (selection instanceof StructuredSelection)
			{
				// viewer
				structuredSelection = (StructuredSelection) selection;
			}
			if (structuredSelection != null && structuredSelection.size() == 0)
			{
				// required selecttion
				Shell shell = new Shell();
				MessageDialog.openWarning(shell, IConstants.Dialog.Common.TITLE,
						IConstants.Dialog.Common.REQUIRED);
			} else if (structuredSelection != null && structuredSelection.size() > 1)
			{
				// select only one
				Shell shell = new Shell();
				MessageDialog.openWarning(shell, IConstants.Dialog.Common.TITLE,
						IConstants.Dialog.Common.SELECT_ONLY_ONE);

			} else
			{

				// get test case file create filesystem path
				String selected = "";

				if (structuredSelection == null)
				{
					// java editor
					IWorkbenchPage activePage = PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage();
					selected = activePage.getActiveEditor().getTitleToolTip();
					String[] dirArr = selected.split(IConstants.DIR_SEPARATOR);
					selected = "";
					for (int i = 1; i < dirArr.length; i++)
					{
						selected += dirArr[i] + IConstants.DIR_SEPARATOR;
					}
					testTargetClassname = dirArr[dirArr.length - 1].replace(".java",
							IConstants.EMPTY_STIRNG);
					testCaseFilename = testTargetClassname + "Test" + IConstants.JAVA_EXP;

				} else if (structuredSelection.getFirstElement() instanceof File)
				{
					// navigator
					String resourceStr = selection.toString().split("src")[1].replace(
							"]", IConstants.EMPTY_STIRNG);
					String[] dirSepArr = resourceStr.split(IConstants.DIR_SEPARATOR);
					testTargetClassname = dirSepArr[dirSepArr.length - 1].replace(
							IConstants.JAVA_EXP, IConstants.EMPTY_STIRNG);
					testCaseFilename = dirSepArr[dirSepArr.length - 1].replace(
							IConstants.JAVA_EXP, "Test" + IConstants.JAVA_EXP);
					selected = "src";
					for (String each : dirSepArr)
					{
						if (each != null && !each.equals(IConstants.EMPTY_STIRNG))
							selected += IConstants.DIR_SEPARATOR + each;
					}

				} else if (structuredSelection.getFirstElement() instanceof CompilationUnit)
				{
					// package explorer
					String classInfoStr = selection.toString();
					selected = classInfoStr.split("\\[in")[1].trim();
					selected = selected.replaceAll("\\.", IConstants.DIR_SEPARATOR);
					testTargetClassname = classInfoStr.split(IConstants.RegExp.JAVA_EXP)[0]
							.replaceAll("(\\[|\\])", IConstants.EMPTY_STIRNG).replaceAll(
									"Working copy ", IConstants.EMPTY_STIRNG).trim();
					testCaseFilename = testTargetClassname + "Test" + IConstants.JAVA_EXP;
					selected = "src/main/java/" + selected + IConstants.DIR_SEPARATOR
							+ testTargetClassname + ".java";
				}

				// get workspace path on os file system
				String projectRootPath = System.getProperty("user.dir");

				// for develpment
				if (projectRootPath.matches(".*eclipse$"))
				{
					String baseDirDev = System.getProperty("osgi.logfile");
					// C:\works\galileo_plugin\runtime-EclipseApplication\.metadata\.log
					baseDirDev = baseDirDev.replaceAll(IConstants.WINDOWS_DIR_SEPARATOR,
							IConstants.DIR_SEPARATOR);
					String dirArr[] = baseDirDev.split(IConstants.DIR_SEPARATOR);
					projectRootPath = "";
					for (int i = 0; i < dirArr.length; i++)
					{
						if (dirArr[i].equals(".metadata"))
							break;
						projectRootPath += dirArr[i] + IConstants.DIR_SEPARATOR;
					}
					projectRootPath += "sample" + IConstants.DIR_SEPARATOR;
				}

				if (testTargetClassname == null)
				{
					// required to select java file
					MessageDialog.openWarning(new Shell(),
							IConstants.Dialog.Common.TITLE,
							IConstants.Dialog.TestCase.SELECT_JAVA_FILE);

				} else
				{

					// TODO
					String[] tmpStrArr = projectRootPath.split(IConstants.DIR_SEPARATOR);
					projectName = tmpStrArr[tmpStrArr.length - 1];

					testCaseResource = selected.replace("src/main/", "src/test/")
							.replace(".java", "Test.java");
					testCaseCreateFilepath = projectRootPath
							+ selected.replace("src/main/", "src/test/").replace(".java",
									"Test.java");

					// check already exist file
					java.io.File outputFile = new java.io.File(testCaseCreateFilepath);
					if (outputFile.exists())
					{
						// open test case
						int retryCount = 0;
						IEditorPart editorPart = null;
						while (true)
						{
							try
							{
								IWorkspace workspace = ResourcesPlugin.getWorkspace();
								IWorkspaceRoot root = workspace.getRoot();
								IProject project = root.getProject(projectName);
								IFile testCaseFile = project.getFile(testCaseResource);
								String editorId = IDE.getEditorDescriptor(
										testCaseFile.getName()).getId();
								IWorkbenchPage page = PlatformUI.getWorkbench()
										.getActiveWorkbenchWindow().getActivePage();
								editorPart = IDE.openEditor(page, testCaseFile, editorId);
								editorPart.setFocus();
							} catch (Exception e)
							{
								e.printStackTrace();
								retryCount++;
								if (retryCount > 10)
									break;
								try
								{
									Thread.sleep(1500);
								} catch (InterruptedException irte)
								{
								}
							}
							break;
						}
					} else
					{
						String msg = IConstants.Dialog.Common.NOT_EXIST + " ("
								+ testCaseFilename + ")" + IConstants.LINE_FEED
								+ IConstants.Dialog.Common.COMFIRM_CREATE_NEW_FILE;

						if (testCaseFilename != null
								&& MessageDialog.openConfirm(new Shell(),
										IConstants.Dialog.Common.TITLE, msg))
						{
							// create new file(java,dicon)
							new CreateNewTestCaseAction().run(action, selection);
						}
					}
				}
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public void selectionChanged(IAction action, ISelection selection)
	{
		this.selection = selection;
		// TODO : popup menu enable/disable
	}

}
