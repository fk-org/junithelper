package com.googlecode.plugin.junithelper.action;

import java.io.File;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;

import com.googlecode.plugin.junithelper.STR;
import com.googlecode.plugin.junithelper.util.ResourcePathUtil;

public class OpenTestTargetAction extends Action implements IActionDelegate
{

	private ISelection selection = null;

	public void run(IAction action)
	{
		try
		{

			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();

			String projectName = null;

			StructuredSelection structuredSelection = null;
			if (selection instanceof StructuredSelection)
			{
				// viewer
				structuredSelection = (StructuredSelection) selection;
			}
			if (structuredSelection != null && structuredSelection.size() == 0)
			{
				// required selecttion
				Shell shell = new Shell();
				MessageDialog.openWarning(shell, STR.Dialog.Common.TITLE,
						STR.Dialog.Common.REQUIRED);
			} else if (structuredSelection != null && structuredSelection.size() > 1)
			{
				// select only one
				Shell shell = new Shell();
				MessageDialog.openWarning(shell, STR.Dialog.Common.TITLE,
						STR.Dialog.Common.SELECT_ONLY_ONE);

			} else
			{

				// path started from project root
				String pathFromProjectRoot = ResourcePathUtil
						.getPathStartsFromProjectRoot(structuredSelection);

				// path started from project root
				// ex. /{projectName}/src/main/java/hoge/foo/var/TestTarget.java
				String[] dirArrFromProjectRoot = pathFromProjectRoot
						.split(STR.DIR_SEPARATOR);
				// test case file create filesystem path
				String selected = STR.EMPTY_STIRNG;
				int len = dirArrFromProjectRoot.length;
				for (int i = 2; i < len - 1; i++)
					selected += dirArrFromProjectRoot[i] + STR.DIR_SEPARATOR;
				selected += dirArrFromProjectRoot[len - 1].replace(STR.SUFFIX_OF_TESTCASE
						+ STR.JAVA_EXP, STR.JAVA_EXP);

				// current project name
				projectName = dirArrFromProjectRoot[1];

				// get workspace path on os file system
				String projectRootPath = workspaceRoot.getLocation() + STR.DIR_SEPARATOR
						+ projectName + STR.DIR_SEPARATOR;

				// check selecting java file
				if (!selected.matches(".*" + STR.RegExp.JAVA_EXP + "$"))
				{
					// required to select java file
					MessageDialog.openWarning(new Shell(), STR.Dialog.Common.TITLE,
							STR.Dialog.TestCase.SELECT_JAVA_FILE);

				} else
				{

					String testTargetResource = selected.replace(STR.SRC_TEST_JAVA,
							STR.SRC_MAIN_JAVA);
					String testTargetPath = projectRootPath
							+ selected.replace(STR.SRC_TEST_JAVA, STR.SRC_MAIN_JAVA);

					// check already exist file
					File outputFile = new File(testTargetPath);
					if (outputFile.exists())
					{
						// open test case
						int retryCount = 0;
						IEditorPart editorPart = null;
						while (true)
						{
							try
							{
								IProject project = workspaceRoot.getProject(projectName);
								IFile testCaseFile = project.getFile(testTargetResource);
								String editorId = IDE.getEditorDescriptor(
										testCaseFile.getName()).getId();
								IWorkbenchPage page = PlatformUI.getWorkbench()
										.getActiveWorkbenchWindow().getActivePage();
								editorPart = IDE.openEditor(page, testCaseFile, editorId);
								editorPart.setFocus();
							} catch (Exception e)
							{
								e.printStackTrace();
								retryCount++;
								if (retryCount > 10)
									break;
								try
								{
									Thread.sleep(1500);
								} catch (InterruptedException irte)
								{
								}
							}
							break;
						}
					}
				}
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public void selectionChanged(IAction action, ISelection selection)
	{
		this.selection = selection;
	}

}
