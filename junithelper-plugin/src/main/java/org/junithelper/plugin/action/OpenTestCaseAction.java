/* 
 * Copyright 2009-2010 junithelper.org. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License. 
 */
package org.junithelper.plugin.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IEditorActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.junithelper.core.config.Configulation;
import org.junithelper.core.constant.RegExp;
import org.junithelper.core.constant.StringValue;
import org.junithelper.core.generator.impl.DefaultTestCaseGenerator;
import org.junithelper.core.meta.ClassMeta;
import org.junithelper.core.meta.extractor.ClassMetaExtractor;
import org.junithelper.core.util.IOUtil;
import org.junithelper.core.util.ThreadUtil;
import org.junithelper.plugin.Activator;
import org.junithelper.plugin.constant.Dialog;
import org.junithelper.plugin.io.PropertiesLoader;
import org.junithelper.plugin.page.PreferenceLoader;
import org.junithelper.plugin.util.EclipseIFileUtil;
import org.junithelper.plugin.util.ResourcePathUtil;
import org.junithelper.plugin.util.ResourceRefreshUtil;

public class OpenTestCaseAction extends Action implements IActionDelegate,
		IEditorActionDelegate {

	private ISelection selection = null;

	public IPreferenceStore store = null;

	public void run(IAction action) {
		if (store == null) {
			store = Activator.getDefault().getPreferenceStore();
		}
		Configulation config = new PreferenceLoader(store).getConfig();
		PropertiesLoader props = new PropertiesLoader(config.language);
		try {
			IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace()
					.getRoot();
			String projectName = null;
			String testTargetClassname = null;
			String testCaseFilename = null;
			String testCaseCreateFilepath = null;
			String testCaseResource = null;
			StructuredSelection structuredSelection = null;
			if (selection instanceof StructuredSelection) {
				// select in view(package explorer, navigator)
				structuredSelection = (StructuredSelection) selection;
			} else {
				// what to do?
			}
			if (structuredSelection != null && structuredSelection.size() == 0) {
				// required selecttion
				MessageDialog.openWarning(new Shell(),
						props.get(Dialog.Common.title),
						props.get(Dialog.Common.required));
				return;
			} else if (structuredSelection != null
					&& structuredSelection.size() > 1) {
				// select only one
				MessageDialog.openWarning(new Shell(),
						props.get(Dialog.Common.title),
						props.get(Dialog.Common.selectOneOnly));
				return;
			}
			// path started from project root
			String pathFromProjectRoot = ResourcePathUtil
					.getPathStartsFromProjectRoot(structuredSelection);
			// path started from project root
			// ex. /{projectName}/src/main/java/hoge/foo/var/TestTarget.java
			String[] dirArrFromProjectRoot = pathFromProjectRoot
					.split(StringValue.DirectorySeparator.General);
			// test case file create filesystem path
			// TODO
			String selected = StringValue.Empty;
			int len = dirArrFromProjectRoot.length;
			for (int i = 2; i < len; i++) {
				selected += dirArrFromProjectRoot[i]
						+ StringValue.DirectorySeparator.General;
			}
			selected = selected
					.replaceAll(RegExp.CRLF, StringValue.Empty)
					.replaceFirst("\\.java.+", ".java")
					.replace(
							StringValue.JUnit.TestClassNameSuffix
									+ StringValue.FileExtension.JavaFile,
							StringValue.FileExtension.JavaFile);
			// current project name
			projectName = dirArrFromProjectRoot[1];
			// last element is test class file name
			String[] selectedSplittedArray = selected.split("/");
			String testTargetClassFilename = selectedSplittedArray[selectedSplittedArray.length - 1]
					.split("\\.")[0];
			testTargetClassname = testTargetClassFilename.replace(
					StringValue.FileExtension.JavaFile, StringValue.Empty);
			// test case name to open
			testCaseFilename = testTargetClassname
					+ StringValue.JUnit.TestClassNameSuffix
					+ StringValue.FileExtension.JavaFile;
			// get workspace path on os file system
			String projectRootPath = workspaceRoot.getLocation()
					+ StringValue.DirectorySeparator.General + projectName
					+ StringValue.DirectorySeparator.General;
			if (testTargetClassname == null) {
				// required to select java file
				MessageDialog.openWarning(new Shell(),
						props.get(Dialog.Common.title),
						props.get(Dialog.Common.selectJavaFile));
			} else {
				testCaseResource = selected.replace(
						config.directoryPathOfProductSourceCode,
						config.directoryPathOfTestSourceCode).replace(
						StringValue.FileExtension.JavaFile,
						StringValue.JUnit.TestClassNameSuffix
								+ StringValue.FileExtension.JavaFile);
				testCaseCreateFilepath = projectRootPath
						+ selected.replace(
								config.directoryPathOfProductSourceCode,
								config.directoryPathOfTestSourceCode).replace(
								StringValue.FileExtension.JavaFile,
								StringValue.JUnit.TestClassNameSuffix
										+ StringValue.FileExtension.JavaFile);
				// check already exist file
				File outputFile = new File(testCaseCreateFilepath);
				if (!outputFile.exists()) {
					// test class creating setting
					// ----------------------------------------
					// create new file
					// ----------------------------------------
					String msg = props.get(Dialog.Common.notExist) + " ("
							+ testCaseFilename + ")" + StringValue.LineFeed
							+ props.get(Dialog.Common.confirmToCreateNewFile);
					if (testCaseFilename != null
							&& MessageDialog.openConfirm(new Shell(),
									props.get(Dialog.Common.title), msg)) {
						// create new file(java,dicon)
						new CreateNewTestCaseAction().run(action, selection);
					}
					return;
				}

				// ----------------------------------------
				// open test case
				// ----------------------------------------
				int retryCount = 0;
				IEditorPart editorPart = null;
				while (true) {
					try {
						IProject project = workspaceRoot
								.getProject(projectName);
						IFile testCaseFile = project.getFile(testCaseResource);
						String editorId = IDE.getEditorDescriptor(
								testCaseFile.getName()).getId();
						IWorkbenchPage page = PlatformUI.getWorkbench()
								.getActiveWorkbenchWindow().getActivePage();
						editorPart = IDE.openEditor(page, testCaseFile,
								editorId);
						editorPart.setFocus();

						// unimplemeneted test methods
						IFile testTargetFile = project.getFile(selected);

						String sourceCodeString = IOUtil
								.readAsString(EclipseIFileUtil
										.getInputStreamFrom(testTargetFile));
						ClassMeta targetClassMeta = new ClassMetaExtractor(
								config).extract(sourceCodeString);
						String currentTestCodeString = IOUtil
								.readAsString(EclipseIFileUtil
										.getInputStreamFrom(testCaseFile));
						String newTestCodeString = new DefaultTestCaseGenerator(
								config).initialize(targetClassMeta)
								.getTestCaseSourceCodeWithLackingTestMethod(
										currentTestCodeString);
						OutputStreamWriter testFileOSWriter = null;
						FileOutputStream outputStream = null;
						try {
							outputStream = new FileOutputStream(projectRootPath
									+ StringValue.DirectorySeparator.General
									+ testCaseResource);
							testFileOSWriter = new OutputStreamWriter(
									outputStream,
									EclipseIFileUtil
											.getDetectedEncodingFrom(testCaseFile));
							testFileOSWriter.write(newTestCodeString);
						} finally {
							IOUtil.close(testFileOSWriter);
							IOUtil.close(outputStream);
						}

						// resource refresh
						if (!ResourceRefreshUtil.refreshLocal(null, projectName
								+ StringValue.DirectorySeparator.General
								+ testCaseResource + "/..")) {
							MessageDialog.openWarning(new Shell(), props
									.get(Dialog.Common.title), props
									.get(Dialog.Common.resourceRefreshError));
							System.err.println("Resource refresh error!");
						} else {
							// open test case
							retryCount = 0;
							ThreadUtil.sleep(1500);
							while (true) {
								try {
									editorPart = IDE.openEditor(page,
											testCaseFile, editorId);
									if (editorPart == null)
										throw new NullPointerException();
									break;
								} catch (Exception e) {
									retryCount++;
									if (retryCount > 3)
										break;
									ThreadUtil.sleep(1500);
								}
							}
							editorPart.setFocus();
						}
					} catch (Exception e) {
						retryCount++;
						if (retryCount > 10)
							break;
						e.printStackTrace();
						ThreadUtil.sleep(1500);
					}
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void selectionChanged(IAction action, ISelection selection) {
		this.selection = selection;
	}

	public void setActiveEditor(IAction action, IEditorPart targetEditor) {
	}

}
